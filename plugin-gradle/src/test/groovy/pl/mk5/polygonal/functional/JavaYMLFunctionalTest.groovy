/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package pl.mk5.polygonal.functional

import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.UnexpectedBuildFailure
import spock.lang.Specification

class JavaYMLFunctionalTest extends Specification {
    def "can run task with default polygon.yml"() {
        given:
        def projectDir = new File("build/e2eTest")
        projectDir.deleteDir()
        projectDir.mkdirs()
        new File(projectDir, "code/java/org/b/example").mkdirs()
        new File(projectDir, "code/java/org/b/example/domain1/dto").mkdirs()
        new File(projectDir, "code/java/org/b/example/domain2/abc/defg").mkdirs()
        new File(projectDir, "code/java/org/b/example/domain2/abc/defg/Foo.java").write("public class Foo { }")
        new File(projectDir, "code/java/org/b/example/domain2/dto").mkdirs()
        new File(projectDir, "code/resources").mkdirs()
        new File(projectDir, "settings.gradle") << ""
        new File(projectDir, "code/resources/polygon.yml") << """
polygon:
  public: -1
  packages:
    abc:
      required: true
      defg:
        public: -1
    dto:
      required: true
"""
        new File(projectDir, "build.gradle") << """
            plugins {
                id('java')
                id('pl.mk5.polygonal-architecture')
            }
            
            polygonalArchitecture {
                sourcesDir = file('code/java')
                basePackage = 'org.b.example'
            }
        """

        when:
        def runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("verifyPolygons")
        runner.withProjectDir(projectDir)
        def result = runner.build()

        then:
        result.output.contains("Task :verifyPolygons")

        cleanup:
        projectDir.deleteDir()
    }

    def "should not allow invalid polygon"() {
        given:
        def projectDir = new File("build/e2eTest")
        projectDir.deleteDir()
        projectDir.mkdirs()
        new File(projectDir, "code/java/org/x/example").mkdirs()
        new File(projectDir, "code/java/org/x/example/domain1/dto").mkdirs()
        new File(projectDir, "code/java/org/x/example/domain2/abc/defg").mkdirs()
        new File(projectDir, "code/java/org/x/example/domain2/abc/defg/Example.java").write("class Example { }")
        new File(projectDir, "code/java/org/x/example/domain2/dto").mkdirs()
        new File(projectDir, "code/java/org/x/example/domain3/abc/defg").mkdirs()
        new File(projectDir, "code/java/org/x/example/domain3/abc/defg/Foo.java").write("public class Foo { }")
        new File(projectDir, "code/java/org/x/example/domain3/Bar.java").write("public enum Bar { }")
        new File(projectDir, "settings.gradle") << ""
        new File(projectDir, "polygon.yml") << """
polygon:
  public: -1
  types: ['class']
  packages:
    abc:
      required: true
      defg:
        public: -1
    dto:
      required: true
"""
        new File(projectDir, "build.gradle") << """
            plugins {
                id('java')
                id('pl.mk5.polygonal-architecture')
            }
            
            polygonalArchitecture {
                sourcesDir = file('code/java')
                basePackage = 'org.b.example'
                polygonTemplate = file('polygon.yml')
            }
        """

        when:
        def runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("verifyPolygons")
        runner.withProjectDir(projectDir)
        def result = runner.build()

        then:
        thrown(UnexpectedBuildFailure)

        cleanup:
        projectDir.deleteDir()
    }

    def "should not allow invalid root level class"() {
        given:
        def projectDir = new File("build/e2eTest")
        projectDir.deleteDir()
        projectDir.mkdirs()
        new File(projectDir, "src/main/java/app/domain1/abc").mkdirs()
        new File(projectDir, "src/main/resources").mkdirs()
        new File(projectDir, "src/main/java/app/domain1/Example.java").write("public class Example { }")
        new File(projectDir, "settings.gradle") << ""
        new File(projectDir, "src/main/resources/polygon.yml") << """
polygon:
  types: ['class']
  packages:
    dto:
      public: -1
"""
        new File(projectDir, "build.gradle") << """
            plugins {
                id('java')
                id('pl.mk5.polygonal-architecture')
            }
            
            polygonalArchitecture {
                basePackage = 'app'
            }
        """

        when:
        def runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("verifyPolygons", "--info")
        runner.withProjectDir(projectDir)
        def result = runner.build()

        then:
        thrown(UnexpectedBuildFailure)

        cleanup:
        projectDir.deleteDir()
    }

    def "should not allow invalid root level class 2"() {
        given:
        def projectDir = new File("build/e2eTest2")
        projectDir.deleteDir()
        projectDir.mkdirs()
        new File(projectDir, "src/main/java/app/domain1/abc").mkdirs()
        new File(projectDir, "src/main/resources").mkdirs()
        new File(projectDir, "src/main/java/app/domain1/Example.java").write("interface Example { }")
        new File(projectDir, "settings.gradle") << ""
        new File(projectDir, "src/main/resources/polygon.yml") << """
polygon:
  types: ['class']
  packages:
    dto:
      public: -1
"""
        new File(projectDir, "build.gradle") << """
            plugins {
                id('java')
                id('pl.mk5.polygonal-architecture')
            }
            
            polygonalArchitecture {
                basePackage = 'app'
            }
        """

        when:
        def runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("verifyPolygons", "--info")
        runner.withProjectDir(projectDir)
        def result = runner.build()

        then:
        thrown(UnexpectedBuildFailure)

        cleanup:
        projectDir.deleteDir()
    }
}
