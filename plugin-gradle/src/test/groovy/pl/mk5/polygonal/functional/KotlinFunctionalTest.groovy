/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package pl.mk5.polygonal.functional

import org.gradle.testkit.runner.GradleRunner
import spock.lang.Specification

class KotlinFunctionalTest extends Specification {
    def "can run task"() {
        given:
        def projectDir = new File("build/e2eTest")
        projectDir.deleteDir()
        projectDir.mkdirs()
        new File(projectDir, "code/kotlin/org/example").mkdirs()
        new File(projectDir, "code/kotlin/org/example/domain1/dto").mkdirs()
        new File(projectDir, "code/kotlin/org/example/domain2/abc/defg").mkdirs()
        new File(projectDir, "code/kotlin/org/example/domain2/abc/defg").mkdirs()
        new File(projectDir, "code/kotlin/org/example/domain2/abc/Bar.kt").write("internal class Foo { }")
        new File(projectDir, "code/kotlin/org/example/domain2/dto").mkdirs()
        new File(projectDir, "settings.gradle") << ""
        new File(projectDir, "build.gradle") << """
            plugins {
                id "org.jetbrains.kotlin.jvm" version "1.3.61"
                id "org.jetbrains.kotlin.plugin.spring" version "1.3.61"
                id('pl.mk5.polygonal-architecture')
            }
            
            polygonalArchitecture {
                sourcesDir = file('code/kotlin')
                basePackage = 'org.example'
                
                polygon {
                  packageDef {
                    name = ''
                    publicScope = -1
                  }
                
                  packageDef {
                    name = 'abc'
                    internalScope = -1
                  }
                
                  packageDef {
                    name = 'dto'
                  }
                  
                  packageDef {
                    name = 'abc.defg'
                    publicScope = -1
                  }
                }
            }
        """

        when:
        def runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("verifyPolygons")
        runner.withProjectDir(projectDir)
        def result = runner.build()

        then:
        result.output.contains("Task :verifyPolygons")
        !result.output.contains("ConditionException")
    }
}
